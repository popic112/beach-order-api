const express = require("express");
const router = express.Router();
const pool = require("../config/db");

/**
 * üü¢ API pentru ini»õializarea setup-ului meniului
 * VerificƒÉ dacƒÉ business_id existƒÉ, altfel √Æl creeazƒÉ
 */
router.post("/initialize", async (req, res) => {
    try {
        const { business_id } = req.body;
        if (!business_id) {
            return res.status(400).json({ error: "business_id este obligatoriu." });
        }

        const [rows] = await pool.query("SELECT business_id FROM menu_setup WHERE business_id = ?", [business_id]);
        if (rows.length === 0) {
            await pool.query("INSERT INTO menu_setup (business_id) VALUES (?)", [business_id]);
            console.log(`‚úÖ Inserat business_id = ${business_id} √Æn menu_setup`);
        }

        res.json({ success: true, message: "Setup-ul meniului este ini»õializat." });
    } catch (error) {
        console.error("‚ùå Eroare la ini»õializarea setup-ului meniului:", error);
        res.status(500).json({ error: "Eroare internƒÉ la server." });
    }
});

/**
 * üü¢ Func»õie pentru a verifica »ôi insera `business_id` dacƒÉ nu existƒÉ
 */
const ensureBusinessExists = async (business_id) => {
    const [rows] = await pool.query("SELECT business_id FROM menu_setup WHERE business_id = ?", [business_id]);
    if (rows.length === 0) {
        await pool.query("INSERT INTO menu_setup (business_id) VALUES (?)", [business_id]);
        console.log(`‚úÖ Inserat business_id = ${business_id} √Æn menu_setup`);
    }
};

/**
 * üü¢ 1. Ob»õinerea setƒÉrilor meniului
 */
router.get("/", async (req, res) => {
    try {
        const { business_id } = req.query;
        if (!business_id) {
            return res.status(400).json({ error: "business_id este obligatoriu." });
        }

        const [settings] = await pool.query("SELECT * FROM menu_setup WHERE business_id = ?", [business_id]);
        if (!settings.length) {
            return res.status(404).json({ error: "SetƒÉrile meniului nu au fost gƒÉsite." });
        }

        // Convertim coordonatele JSON √Æn obiect
        const parsedSettings = settings[0];
        parsedSettings.coordinates = parsedSettings.coordinates ? JSON.parse(parsedSettings.coordinates) : [];

        res.json(parsedSettings);
    } catch (error) {
        console.error("‚ùå Eroare la ob»õinerea setƒÉrilor meniului:", error);
        res.status(500).json({ error: "Eroare internƒÉ la server." });
    }
});

/**
 * üü¢ 2. Setarea coordonatelor loca»õiei
 */
router.post("/set-coordinates", async (req, res) => {
    try {
        const { business_id, coordinates } = req.body;

        if (!business_id || !coordinates || !Array.isArray(coordinates)) {
            return res.status(400).json({ error: "Date invalide." });
        }

        await ensureBusinessExists(business_id);

        const coordinatesJson = JSON.stringify(coordinates);
        const [updateResult] = await pool.query(
            "UPDATE menu_setup SET coordinates = ? WHERE business_id = ?",
            [coordinatesJson, business_id]
        );

        if (updateResult.affectedRows === 0) {
            return res.status(500).json({ error: "UPDATE a e»ôuat, nicio linie afectatƒÉ." });
        }

        console.log("‚úÖ Coordonate salvate:", coordinatesJson);
        res.json({ success: true, message: "Coordonatele loca»õiei au fost salvate." });
    } catch (error) {
        console.error("‚ùå Eroare la setarea coordonatelor:", error);
        res.status(500).json({ error: "Eroare internƒÉ la server." });
    }
});

module.exports = router;
